name: Check Agda Files

on:

  schedule:
    # Runs twice a day at 08:00 and 18:00 BRT
    - cron: '0 11,21 * * *'
  workflow_dispatch: # Allows manual triggering

jobs:
  check-all-agda: 
    permissions:
      issues: write
      contents: read

    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up environment
        run: |
          echo "PATH=$PATH:/usr/local/bin:/home/runner/.local/bin" >> $GITHUB_ENV

      - name: Verify Agda and agda-cli installations
        run: |
          agda --version
          which agda-cli

      - name: Run Agda checks
        id: check_agda
        run: | 
          OK_OUTPUT=$'Checked.\nNo output'

          strip_ansi() {
            sed 's/\x1b\[[0-9;]*m//g'
          }

          check_file() {
            file="$1"	
            output=$(agda-cli check "$file" 2>&1 | strip_ansi)
            if [ "$output" = "$OK_OUTPUT" ]; then
              echo "Checked $file: OK"
            else
              echo -e "Checking: $file ERR"
              echo "$output"
              {
                echo "Checking: $file ERR"
                echo "$output"
                echo ""
              } >> error_output.log
              echo "errors_found=true" >> $GITHUB_ENV
            fi 
          }
          export -f check_file
          export -f strip_ansi
          export OK_OUTPUT

          > error_output.log

          find "./Base" -name "*.agda" -not -path "*.tmp*" -not -path "*/Test/*" -print0 | \
            parallel -0 -j 12 check_file

          if [ -s error_output.log ]; then
            echo "error_output<<EOF" >> $GITHUB_OUTPUT
            cat error_output.log >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
        timeout-minutes: 10
            
      - name: Handle Agda check results
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');
            const errorsFound = process.env.errors_found === 'true';

            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'errors,automated'
            });
            const existingIssue = issues.find(issue => 
              issue.title === "Agda Check Errors (Auto-generated)" && 
              issue.user.login === 'github-actions[bot]'
            );

            if (errorsFound) {
              let issueContent = fs.readFileSync('error_output.log', 'utf8');

              // Format content for better readability
              issueContent = "# Agda Check Errors\n\n" + issueContent.split('\n').map(line => {
                if (line.startsWith('Checking:')) {
                  return `## ${line}`;
                } else if (line.startsWith('Error:')) {
                  return `**${line}**\n\`\`\`hs`;
                } else if (line.trim() === 'No output') {
                  return `${line}\n\`\`\``;
                } else {
                  return line;
                }
              }).join('\n');

              if (existingIssue) {
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: existingIssue.number,
                  title: "Agda Check Errors (Auto-generated)",
                  body: issueContent,
                  labels: ['errors', 'automated']
                });
              } else {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: "Agda Check Errors (Auto-generated)",
                  body: issueContent,
                  labels: ['errors', 'automated']
                });
              }
            } else if (existingIssue) {
              // Close issue if it exists and no errors were found
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                state: 'closed',
                state_reason: 'completed'
              });
            }

      - name: Upload output as an artifact
        if: env.errors_found == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: agda-check-output
          path: error_output.log

      - name: Clean up
        run: rm -f error_output.log


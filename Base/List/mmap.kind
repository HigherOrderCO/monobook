use Base/List/ as L/
use Base/Trait/ as T/

// Applies a function to each element of a list, passing the mapped value to a monadic function.
// This allows for lazy evaluation of the mapped values.
// - M: The monad type constructor.
// - m: The Monad instance for M.
// - A: The type of elements in the input list.
// - B: The type of elements in the output list.
// - f: The function to apply to each element.
// - xs: The elements to apply f to.
// = A new list with the mapped values from g applied to the results of f.
L/mmap
: ∀(M: ∀(A: *) *)
  ∀(m: (T/Monad M))
  ∀(A: *)
  ∀(B: *)
  ∀(f: ∀(a: A) (M B))
  ∀(xs: (L/List A))
  (M (L/List B))
= λM λm λA λB λf λ{
  #Nil: (T/Monad/pure M m _ #Nil{})
  #Cons: λxs.head λxs.tail
    let bind = (T/Monad/bind M m)
    let pure = (T/Monad/pure M m)
    (bind _ _ (f xs.head) λy
    (bind _ _ (L/mmap M m A B f xs.tail) λys
    (pure _ (#Cons{y ys}))))
}

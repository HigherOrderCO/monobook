use Base/List/ as L/
use Base/Bool/ as B/

// Drops elements from the front of the list as long as they satisfy the predicate.
// - A: The type of elements in the list.
// - fn: The predicate function.
// - xs: The input list.
// = A list containing the remaining elements after dropping the longest prefix of xs of elements that satisfy fn.
L/drop-while
: ∀(A: *)
  ∀(fn: ∀(a: A) B/Bool)
  ∀(xs: (L/List A))
  (L/List A)
= λA λfn λ{
  #Nil: #Nil{}
  #Cons: λxs.head λxs.tail
    use if_t = (L/drop-while _ fn xs.tail)
    use if_f = #Cons{xs.head xs.tail}
    (B/if _ (fn xs.head) if_t if_f)
}

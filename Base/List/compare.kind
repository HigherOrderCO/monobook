use Base/List/ as L/
use Base/Ordering/ as O/
use Base/Trait/ as T/

// Compares two lists lexicographically.
// - A: The type of elements in the lists.
// - ord: The Ord instance for type A.
// - xs: The first list.
// - ys: The second list.
// = LT if xs < ys, EQ if xs = ys, GT if xs > ys.
L/compare
: ∀(A: *)
  ∀(ord: (T/Ord A))
  ∀(xs: (L/List A))
  ∀(ys: (L/List A))
  O/Ordering
= λA λord λ{
  #Nil: λ{
    #Nil: #EQ{}
    #Cons: λys.head λys.tail #LT{}
  }
  #Cons: λxs.head λxs.tail λ{
    #Nil: #GT{}
    #Cons: λys.head λys.tail
      let head_cmp = (T/Ord/compare A ord xs.head ys.head)
      (O/match
        O/Ordering
        #LT{}
        (L/compare A ord xs.tail ys.tail)
        #GT{}
        head_cmp)
  }
}

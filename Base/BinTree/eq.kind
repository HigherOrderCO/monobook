use Base/BinTree/ as BT/
use Base/Bool/ as B/
use Base/Trait/ as T/

// Checks if two binary trees are equal.
// - 1st: The type of elements in the tree.
// - 2nd: An equality function for type.
// - 3rd: The first tree to compare.
// - 4th: The second tree to compare.
// = True if the trees are equal, False otherwise.
BT/eq
: ∀(A: *)
  ∀(e: (T/Eq A))
  ∀(a: (BT/BinTree A))
  ∀(b: (BT/BinTree A))
  B/Bool
= λA λe λ{
  #Leaf: λ{
    #Leaf: #True{}
    #Node: λb.val λb.lft λb.rgt #False{}
  }
  #Node: λa.val λa.lft λa.rgt λ{
    #Leaf: #False{}
    #Node: λb.val λb.lft λb.rgt
      let eq_val = (T/Eq/eq A e a.val b.val)
      let eq_lft = (BT/eq A e a.lft b.lft)
      let eq_rgt = (BT/eq A e a.rgt b.rgt)
      (B/and eq_val (B/and eq_lft eq_rgt))
  }
}

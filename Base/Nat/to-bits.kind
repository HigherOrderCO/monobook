use Base/Nat/ as N/
use Base/Bits/ as BS/
use Base/Bool/ as B/

// Handles the recursive case for converting a natural number to its binary representation.
// 1st: The remaining part of the natural number to convert.
// = The binary representation of the number as Bits.
N/to-bits/helper
: ∀(n: N/Nat)
  BS/Bits
= λ{
  #Zero: #O{#E{}}
	#Succ: λ{
		#Zero: #I{#E{}}
		#Succ: λn.pred
			let quotient = (N/div #Succ{#Succ{n.pred}} #Succ{#Succ{#Zero{}}})
			let remainder = (N/mod #Succ{#Succ{n.pred}} #Succ{#Succ{#Zero{}}})
			(B/if BS/Bits (N/eq remainder #Zero{})
				#O{(N/to-bits/helper quotient)}
				#I{(N/to-bits/helper quotient)})
	}
}

// Converts a natural number to its binary representation.
// 1st: The natural number to convert.
// = The binary representation of the number as Bits.
N/to-bits
: ∀(n: N/Nat)
  BS/Bits
= λ{
  #Zero: #O{#E{}}
  #Succ: λn.pred (N/to-bits/helper #Succ{n.pred})
}
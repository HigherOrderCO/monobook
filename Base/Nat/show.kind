use Base/Nat/ as N/
use Base/String/ as S/
use Base/List/ as L/

// Converts a digit (0-9) to its corresponding character code ()
N/digit_to_char
: ∀(n: N/Nat)
  U32
= λ{
  #Zero: 48
  #Succ: λ{
    #Zero: 49
    #Succ: λ{
      #Zero: 50
      #Succ: λ{
        #Zero: 51
        #Succ: λ{
          #Zero: 52
          #Succ: λ{
            #Zero: 53
            #Succ: λ{
              #Zero: 54
              #Succ: λ{
                #Zero: 55
                #Succ: λ{
                  #Zero: 56
                  #Succ: λ{
                    #Zero: 57
                    #Succ: λn 57
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}



// TODO: create type Char
// Recursively builds the reversed string representation of a natural number
N/show_rev
: ∀(n: N/Nat)
  ∀(acc: S/String)
  S/String
= λ{
  #Zero: λacc acc
  #Succ: λn.pred λacc 
	let n10 = (N/div (#Succ{n.pred}) #Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}}}}}}}})
  let rem = (N/mod n #Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}}}}}}}})
  let digit = (N/digit_to_char rem)
  let new_acc = #Cons{digit acc} 
	(N/show_rev n10 new_acc)
	}


// Converts a natural number to its string representation.
N/show
: ∀(n: N/Nat)
  S/String
= λ{
  #Zero: #Cons{48 #Nil{}}
  #Succ: λn.pred (N/show_rev (#Succ{n.pred}) #Nil{})
	}